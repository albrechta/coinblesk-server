<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/security"
    xmlns:beans="http://www.springframework.org/schema/beans" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
	http://www.springframework.org/schema/security
	http://www.springframework.org/schema/security/spring-security-3.2.xsd">
     
    <http pattern="/resources/**" security="none" />
    <http pattern="/login" security='none' />
    <http pattern="/" security='none' />
    
	<http auto-config="false" use-expressions="true" entry-point-ref="restAuthenticationEntryPoint">
		<intercept-url pattern="/user/afterLogin" access="hasAnyRole('ROLE_USER', 'ROLE_BOTH')" requires-channel="http" />
		<intercept-url pattern="/user/update" access="hasAnyRole('ROLE_USER', 'ROLE_BOTH')" requires-channel="http" />
		<intercept-url pattern="/user/delete" access="hasAnyRole('ROLE_USER', 'ROLE_BOTH')" requires-channel="http" />
		<intercept-url pattern="/user/mainActivityRequests" access="hasAnyRole('ROLE_USER', 'ROLE_BOTH')" requires-channel="http" />
		<intercept-url pattern="/user/savePublicKey" access="hasAnyRole('ROLE_USER', 'ROLE_BOTH')" requires-channel="http" />
		<intercept-url pattern="/user/create" access="permitAll" requires-channel="http" />
		<intercept-url pattern="/user/resetPassword/**" access="permitAll" requires-channel="http" />
		<intercept-url pattern="/user/resetPasswordRequest" access="permitAll" requires-channel="http" />
		<intercept-url pattern="/user/createAdmin/**" access="permitAll" requires-channel="http" />
		<intercept-url pattern="/user/verify/**" access="permitAll" requires-channel="http" />
		<intercept-url pattern="/transaction/create" access="hasAnyRole('ROLE_USER', 'ROLE_BOTH')" requires-channel="http" />
		<intercept-url pattern="/transaction/history/**" access="hasAnyRole('ROLE_USER', 'ROLE_BOTH')" requires-channel="http" />
		<intercept-url pattern="/transaction/payOut" access="hasAnyRole('ROLE_USER', 'ROLE_BOTH')" requires-channel="http" />
		<intercept-url pattern="/transaction/payIn/**" access="hasAnyRole('ROLE_USER', 'ROLE_BOTH')" requires-channel="http" />
		<intercept-url pattern="/transaction/exchange-rate" access="permitAll" requires-channel="http" />
		<intercept-url pattern="/serveraccounts/**" access="hasAnyRole('ROLE_USER', 'ROLE_BOTH')" requires-channel="http" />
		<intercept-url pattern="/rules/**" access="hasAnyRole('ROLE_USER', 'ROLE_BOTH')" requires-channel="http" />
		<intercept-url pattern="/communication/**" access="permitAll" requires-channel="http"/>
		<intercept-url pattern="/login/**" access="permitAll" requires-channel="http"/>		
		<intercept-url pattern="/home/**" access="hasAnyRole('ROLE_ADMIN', 'ROLE_BOTH')" requires-channel="http"/>
		<intercept-url pattern="/relation/**" access="hasAnyRole('ROLE_ADMIN', 'ROLE_BOTH')" requires-channel="http"/>
		<intercept-url pattern="/users/**" access="hasAnyRole('ROLE_ADMIN', 'ROLE_BOTH')" requires-channel="http"/>
		<intercept-url pattern="/history/**" access="hasAnyRole('ROLE_ADMIN', 'ROLE_BOTH')" requires-channel="http"/>
		<intercept-url pattern="/activities/**" access="hasAnyRole('ROLE_ADMIN', 'ROLE_BOTH')" requires-channel="http"/>
		<intercept-url pattern="/serveraccount/**" access="hasAnyRole('ROLE_ADMIN', 'ROLE_BOTH')" requires-channel="http"/>
		<intercept-url pattern="/messages/**" access="hasAnyRole('ROLE_ADMIN', 'ROLE_BOTH')" requires-channel="http"/>
		<intercept-url pattern="/**" access="isFullyAuthenticated()" requires-channel="http" />

		<logout invalidate-session="true" 
				logout-success-url="/"
				delete-cookies="JSESSIONID"
				logout-url="/spring_security_logout"/>
		
		<custom-filter ref="concurrencyFilter" position="CONCURRENT_SESSION_FILTER" />
 		<custom-filter ref="authenticationFilter" position="FORM_LOGIN_FILTER" />
	
		<session-management session-authentication-strategy-ref="sas"/>
	</http>
	
	<!-- Concurrent Session Settings -->
	<beans:bean id="concurrencyFilter" class="org.springframework.security.web.session.ConcurrentSessionFilter">
	    <beans:property name="sessionRegistry" ref="sessionRegistry" />
	    <beans:property name="expiredUrl" value="/" />
	</beans:bean>
	<beans:bean id="sas" class="org.springframework.security.web.authentication.session.ConcurrentSessionControlStrategy">
	    <beans:constructor-arg name="sessionRegistry" ref="sessionRegistry" />
	    <beans:property name="maximumSessions" value="1" />
	</beans:bean>
	<beans:bean id="sessionRegistry" class="org.springframework.security.core.session.SessionRegistryImpl" />

 	<!-- Custom filter for username and password. The real customization is done in the customAthenticationManager -->
 	<beans:bean id="authenticationFilter" class="org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter">
 	    <beans:property name="authenticationManager" ref="customAuthenticationManager" />
 	    <beans:property name="authenticationFailureHandler" ref="customAuthenticationFailureHandler" />
 	    <beans:property name="authenticationSuccessHandler" ref="customAuthenticationSuccessHandler" />
 	    <beans:property name="sessionAuthenticationStrategy" ref="sas" />
	</beans:bean>
  		
	<!-- Custom authentication manager. In order to authenticate, username and password must not be the same -->
	<beans:bean id="customAuthenticationManager" class="ch.uzh.csg.coinblesk.server.auth.CustomAuthenticationManager" />
 	
 	<!-- We just actually need to set the default failure url here -->
 	<beans:bean id="customAuthenticationFailureHandler" class="org.springframework.security.web.authentication.SimpleUrlAuthenticationFailureHandler" />
 		
 	 <!-- We just actually need to set the default target url here -->
 	<beans:bean id="customAuthenticationSuccessHandler" class="ch.uzh.csg.coinblesk.server.auth.CustomAuthenticationSuccessHandler" />
 	
 	<beans:bean id="restAuthenticationEntryPoint"  class="ch.uzh.csg.coinblesk.server.auth.RestAuthenticationEntryPoint" />

	<!-- The tag below has no use but Spring Security needs it to autowire the parent property of 
			org.springframework.security.authentication.ProviderManager. Otherwise we get an error 
			A probable bug. This is still under investigation-->
	<!-- <authentication-manager/> -->
	<authentication-manager/>
<!--     <authentication-provider>
        <user-service>
            <user name="admin" password="$2a$10$IbT4Y1NXCYakXmZwGYArjuD91CIucsgxCOU3s4GEPuVcuxIpmIRiq" authorities="ROLE_ADMIN" />
        </user-service>
    </authentication-provider>
</authentication-manager> -->
 
</beans:beans>
